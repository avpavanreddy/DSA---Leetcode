class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        vector<vector<pair<int, double>>> graph(n);
        for(int i=0;i<edges.size();i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            double prob=succProb[i];
            graph[u].emplace_back(v,prob);
            graph[v].emplace_back(u,prob);
        }
      
        priority_queue<pair<double, int>> maxHeap;
        maxHeap.emplace(1.0,start);
        
        vector<double> maxProb(n, 0.0);
        maxProb[start] = 1.0;
        
        while(!maxHeap.empty())
        {
            auto [currProb, currNode] = maxHeap.top();
            maxHeap.pop();
            
            if (currNode == end) {
            return currProb;
            }
                
                for(auto& [neighbour,edgeProb]: graph[currNode])
                {
                  double newProb = currProb * edgeProb;
                       if (newProb > maxProb[neighbour]) {
        maxProb[neighbour] = newProb;
        maxHeap.emplace(newProb, neighbour);
    }
            }
        }
        
        return 0.0;
    }
};
