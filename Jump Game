class Solution {
public:
    bool f(vector<int>&nums,int idx,vector<int>&dp)
    {
       if (idx == nums.size()-1) {
            return true;
        }
        if(dp[idx]!=-1)
            return dp[idx]; 
        int furthestJump = min(idx + nums[idx], (int)nums.size() - 1);
        
        for (int nextPosition = idx + 1; nextPosition <= furthestJump; nextPosition++) {
            if (f(nums,nextPosition,dp)) {
                dp[idx]=1;
                return true;
            }
        }
        dp[idx]=0;
        return false;
    }
    bool canJump(vector<int>& nums) {
        int n=nums.size();
        vector<int>dp(n,-1);
        return f(nums,0,dp);
    }
};
